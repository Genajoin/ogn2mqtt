#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã Prometheus –º–µ—Ç—Ä–∏–∫
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */

require('dotenv').config();
const PrometheusMetrics = require('../lib/metrics');
const http = require('http');

async function demonstrateMetrics() {
  console.log('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Prometheus –º–µ—Ç—Ä–∏–∫ –¥–ª—è OGN2MQTT\n');

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–æ—Ä—Ç—É
  const metrics = new PrometheusMetrics({
    port: 9092,
    enabled: true
  });

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫
    await metrics.startServer();
    const serverStatus = metrics.getServerStatus();
    console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω:', serverStatus);

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    console.log('\nüìä –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏...');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    for (let i = 0; i < 10; i++) {
      metrics.incrementOgnMessages();
      metrics.incrementParsedMessages();
      
      if (i % 2 === 0) {
        metrics.incrementConvertedMessages();
        metrics.incrementPublishedMessages();
      }
      
      if (i === 3) {
        metrics.incrementErrors('aprs_processing');
      }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è gauge –º–µ—Ç—Ä–∏–∫
    metrics.setActiveDevices(25);
    metrics.setOgnConnectionStatus(true);
    metrics.setMqttConnectionStatus(true);
    metrics.updateUptime(new Date(Date.now() - 300000)); // 5 –º–∏–Ω—É—Ç uptime

    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const endTimer = metrics.startMessageProcessingTimer();
    await new Promise(resolve => setTimeout(resolve, 10)); // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    endTimer();

    console.log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    console.log('\nüìà –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus:');
    
    const response = await new Promise((resolve, reject) => {
      const req = http.get('http://localhost:9092/metrics', (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => resolve({ statusCode: res.statusCode, data }));
      });
      req.on('error', reject);
      req.setTimeout(2000);
    });

    if (response.statusCode === 200) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—à–∏ –º–µ—Ç—Ä–∏–∫–∏ (–Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ Node.js)
      const lines = response.data.split('\n');
      const ognMetrics = lines.filter(line => 
        line.startsWith('ogn_') || line.startsWith('mqtt_') || 
        (line.startsWith('#') && (line.includes('ogn_') || line.includes('mqtt_')))
      );
      
      console.log('üéØ OGN2MQTT –º–µ—Ç—Ä–∏–∫–∏:');
      ognMetrics.forEach(line => {
        if (line.trim()) {
          console.log(`  ${line}`);
        }
      });
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º health endpoint
    console.log('\nüè• –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint:');
    const healthResponse = await new Promise((resolve, reject) => {
      const req = http.get('http://localhost:9092/health', (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => resolve({ statusCode: res.statusCode, data }));
      });
      req.on('error', reject);
      req.setTimeout(2000);
    });

    if (healthResponse.statusCode === 200) {
      const healthData = JSON.parse(healthResponse.data);
      console.log('‚úÖ Health check:', healthData);
    }

    console.log('\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus:');
    console.log('   - –î–æ–±–∞–≤—å—Ç–µ ogn2mqtt:9091 –≤ targets Prometheus');
    console.log('   - –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ /metrics endpoint');
    console.log('   - Health check –Ω–∞ /health endpoint');
    console.log('   - –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Grafana –¥–∞—à–±–æ—Ä–¥–∞–º–∏\n');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
  } finally {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    await metrics.stopServer();
    console.log('üõë –°–µ—Ä–≤–µ—Ä –º–µ—Ç—Ä–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  demonstrateMetrics().catch(console.error);
}

module.exports = { demonstrateMetrics };